-- To identify quality issues -- 
SELECT 
cst_id,
COUNT(*)
FROM bronze.crm_cust_info
GROUP BY cst_id 
HAVING COUNT(*) > 1 OR cst_id IS NULL

-- Checking one of the cst_id with duplicate values 
SELECT * FROM bronze.crm_cust_info
WHERE cst_id = 29466

/ * Result 
  29466	AW00029466	NULL	NULL	NULL	NULL	2026-01-25
  29466	AW00029466	Lance	Jimenez	M	NULL	2026-01-26
  29466	AW00029466	Lance	Jimenez	M	M	2026-01-27
  * /

-- Insert in silver the below cleaned data
BEGIN TRANSACTION; 

SELECT 
cst_id,
cst_key,
cst_firstname,
cst_lastname,
CASE WHEN UPPER(LTRIM(RTRIM(cst_marital_status))) = 'S' THEN 'Single'
     WHEN UPPER(LTRIM(RTRIM(cst_marital_status))) = 'M' THEN 'Married'
     ELSE 'n/a'
END AS cst_marital_status,
CASE WHEN UPPER(LTRIM(RTRIM(cst_gndr))) = 'F' THEN 'Female'
     WHEN UPPER(LTRIM(RTRIM(cst_gndr))) = 'M' THEN 'Male'
     ELSE 'n/a'
END AS cst_gndr,
cst_create_date
INTO silver.temp_transformed_cust
FROM (
    SELECT *,
    ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) as flag_last
-- flag_last denotes the most recent value in the duplicates partitioned by cst_id
    FROM bronze.crm_cust_info
    WHERE cst_id IS NOT NULL
)t WHERE flag_last = 1;


TRUNCATE TABLE silver.crm_cust_info;

INSERT INTO silver.crm_cust_info (
    cst_id,
    cst_key,
    cst_firstname,
    cst_lastname,
    cst_marital_status,
    cst_gndr,
    cst_create_date
)

DROP TABLE silver.temp_transformed_cust;

COMMIT TRANSACTION;
