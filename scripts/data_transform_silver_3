-- To identify quality issues -- 
SELECT 
cst_id,
COUNT(*)
FROM bronze.crm_cust_info
GROUP BY cst_id 
HAVING COUNT(*) > 1 OR cst_id IS NULL

-- Checking one of the cst_id with duplicate values 
SELECT * FROM bronze.crm_cust_info
WHERE cst_id = 29466

/ * Result 
  29466	AW00029466	NULL	NULL	NULL	NULL	2026-01-25
  29466	AW00029466	Lance	Jimenez	M	NULL	2026-01-26
  29466	AW00029466	Lance	Jimenez	M	M	2026-01-27
  * /

-- Insert in silver the below cleaned data
BEGIN TRANSACTION; 

SELECT 
cst_id,
cst_key,
cst_firstname,
cst_lastname,
CASE WHEN UPPER(LTRIM(RTRIM(cst_marital_status))) = 'S' THEN 'Single'
     WHEN UPPER(LTRIM(RTRIM(cst_marital_status))) = 'M' THEN 'Married'
     ELSE 'n/a'
END AS cst_marital_status,
CASE WHEN UPPER(LTRIM(RTRIM(cst_gndr))) = 'F' THEN 'Female'
     WHEN UPPER(LTRIM(RTRIM(cst_gndr))) = 'M' THEN 'Male'
     ELSE 'n/a'
END AS cst_gndr,
cst_create_date
INTO silver.temp_transformed_cust
FROM (
    SELECT *,
    ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) as flag_last
-- flag_last denotes the most recent value in the duplicates partitioned by cst_id
    FROM bronze.crm_cust_info
    WHERE cst_id IS NOT NULL
)t WHERE flag_last = 1;


TRUNCATE TABLE silver.crm_cust_info;

INSERT INTO silver.crm_cust_info (
    cst_id,
    cst_key,
    cst_firstname,
    cst_lastname,
    cst_marital_status,
    cst_gndr,
    cst_create_date
)

DROP TABLE silver.temp_transformed_cust;

COMMIT TRANSACTION;


-- Data Transformation within the product information table crm_prod_info

BEGIN TRANSACTION;

-- Step 1: Create transformed data in temp table
SELECT 
    prd_id,
    REPLACE(SUBSTRING(prd_key, 1, 5), '-','_') AS cat_id, -- Derived column
    SUBSTRING(prd_key, 7, LEN(prd_key)) AS prd_key,
    prd_nm,
    ISNULL(prd_cost, 0) AS prd_cost, --Handling of missing information
    CASE -- Data mapping 
        WHEN UPPER(TRIM(prd_line)) = 'M' THEN 'Mountain'
        WHEN UPPER(TRIM(prd_line)) = 'R' THEN 'Road'
        WHEN UPPER(TRIM(prd_line)) = 'S' THEN 'Other Sales'
        WHEN UPPER(TRIM(prd_line)) = 'T' THEN 'Touring'
        ELSE 'n/a'
    END AS prd_line,
    prd_start_dt,
    DATEADD(day, -1, LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt)) AS prd_end_dt   -- Data enrichment 
INTO silver.temp_transformed_prod
FROM bronze.crm_prod_info;

-- Step 2: Clear target table
TRUNCATE TABLE silver.crm_prod_info;

-- Step 3: Insert transformed data
INSERT INTO silver.crm_prod_info(
    prd_id,
    cat_id,
    prd_key,
    prd_nm,
    prd_cost,
    prd_line,
    prd_start_dt,
    prd_end_dt
)
SELECT 
    prd_id,
    cat_id,
    prd_key,
    prd_nm,
    prd_cost,
    prd_line,
    prd_start_dt,
    prd_end_dt
FROM silver.temp_transformed_prod
WHERE prd_end_dt IS NOT NULL OR 
      prd_id IN (
          SELECT prd_id 
          FROM silver.temp_transformed_prod t1
          WHERE prd_end_dt IS NULL AND
                NOT EXISTS (
                    SELECT 1 
                    FROM silver.temp_transformed_prod t2
                    WHERE t2.prd_key = t1.prd_key AND
                          t2.prd_start_dt > t1.prd_start_dt
                )
      );

-- Step 4: Clean up
DROP TABLE silver.temp_transformed_prod;

COMMIT TRANSACTION;


